polygon(c(min(x1),x1, max(x1), min(x2), x2, max(x2)),
c(0, dnorm(x1),0, 0, dnorm(x2), 0), col = "grey60")
text(x = c(-3.5, 3.5), y = c(0.08,0.08), labels = paste0(a*100,"%"), cex = 1.5)
text(x = 0, y = 0.08, labels=paste0(100*(1-alpha),"%"), cex = 1.5)
}
plot_critical(0.05)
plot_critical <- function(alpha) {
par(mar = c(7,4,5,4))
a <- alpha/2
x <- (-50:50)/10
y <- dnorm(x)
q1 <- qnorm(a); q2 <- qnorm(1-a)
# draw the plot
main <- paste("Critical values and regions of the N(0,1) distribution \n",
" alpha/2 =", a)
plot(x, y, type ="l", main = main, xlab = "", yaxt = "n", ylab = "")
mtext(paste0("-z = qnorm(",1 - a,") = ",round(q1,2),"\n",
"z = qnorm(",a,") = ",round(q2,2)),side=1, line = 5, cex = 1.5)
# highlight critical regions
x1 <- x[x<=q1]; x2 <- x[x>=q2]
polygon(c(min(x1),x1, max(x1), min(x2), x2, max(x2)),
c(0, dnorm(x1),0, 0, dnorm(x2), 0), col = "grey60")
text(x = c(-3.5, 3.5), y = c(0.08,0.08), labels = paste0(a*100,"%"), cex = 1.5)
text(x = 0, y = 0.08, labels=paste0(100*(1-alpha),"%"), cex = 1.5)
}
plot_critical(0.05)
plot_critical <- function(alpha) {
par(mar = c(7,4,5,4))
a <- alpha/2
x <- (-50:50)/10
y <- dnorm(x)
q1 <- qnorm(a); q2 <- qnorm(1-a)
# draw the plot
main <- paste("Critical values and regions of the N(0,1) distribution \n",
" alpha/2 =", a)
plot(x, y, type ="l", main = main, xlab = "", yaxt = "n", ylab = "")
mtext(paste0("-z = q(",1 - a,") = ",round(q1,2),"\n",
"z = q(",a,") = ",round(q2,2)),side=1, line = 5, cex = 1.5)
# highlight critical regions
x1 <- x[x<=q1]; x2 <- x[x>=q2]
polygon(c(min(x1),x1, max(x1), min(x2), x2, max(x2)),
c(0, dnorm(x1),0, 0, dnorm(x2), 0), col = "grey60")
text(x = c(-3.5, 3.5), y = c(0.08,0.08), labels = paste0(a*100,"%"), cex = 1.5)
text(x = 0, y = 0.08, labels=paste0(100*(1-alpha),"%"), cex = 1.5)
}
plot_critical(0.05)
plot_critical <- function(alpha) {
par(mar = c(7,4,5,4))
a <- alpha/2
x <- (-50:50)/10
y <- dnorm(x)
q1 <- qnorm(a); q2 <- qnorm(1-a)
# draw the plot
main <- paste("Critical values and regions of the N(0,1) distribution \n",
" alpha/2 =", a)
plot(x, y, type ="l", main = main, xlab = "", yaxt = "n", ylab = "")
mtext(paste0("-z = qnorm(",1 - a,") = ",round(q1,2),"\n",
"z = qnorm(",a,") = ",round(q2,2)),side=1, line = 5, cex = 1.5)
# highlight critical regions
x1 <- x[x<=q1]; x2 <- x[x>=q2]
polygon(c(min(x1),x1, max(x1), min(x2), x2, max(x2)),
c(0, dnorm(x1),0, 0, dnorm(x2), 0), col = "grey60")
text(x = c(-3.5, 3.5), y = c(0.08,0.08), labels = paste0(a*100,"%"), cex = 1.5)
text(x = 0, y = 0.08, labels=paste0(100*(1-alpha),"%"), cex = 1.5)
}
plot_critical(0.05)
get_z <- function(alpha) {
par(mar = c(7,4,5,4))
a <- alpha/2
x <- (-50:50)/10
y <- dnorm(x)
q1 <- qnorm(a); q2 <- qnorm(1-a)
# draw the plot
main <- paste("Critical values and regions of the N(0,1) distribution \n",
" alpha/2 =", a)
plot(x, y, type ="l", main = main, xlab = "", yaxt = "n", ylab = "")
mtext(paste0("-z = qnorm(",1 - a,") = ",round(q1,2),"\n",
"z = qnorm(",a,") = ",round(q2,2)),side=1, line = 5, cex = 1.5)
# highlight critical regions
x1 <- x[x<=q1]; x2 <- x[x>=q2]
polygon(c(min(x1),x1, max(x1), min(x2), x2, max(x2)),
c(0, dnorm(x1),0, 0, dnorm(x2), 0), col = "grey60")
text(x = c(-3.5, 3.5), y = c(0.08,0.08), labels = paste0(a*100,"%"), cex = 1.5)
text(x = 0, y = 0.08, labels=paste0(100*(1-alpha),"%"), cex = 1.5)
return(q2)
}
get_z(alpha = 0.05)
points <- learning2014$points
c("estimate" = mu, "lower" = lower_ci,"upper"=upper_ci)
n <- length(points)
# estimate the expected value and standard deviation of poins
mu <- mean(points)
s <- sd(points)
# estimate the standard error of mu
error <- NULL
# get the value of z with a specified alpha. use get_z()
z <- NULL
# confidence interval
lower_ci <- mu - z*error
upper_ci <- mu + z*error
c("estimate" = mu, "lower" = lower_ci,"upper"=upper_ci)
c(mu, lower_ci, upper_ci)
z <- qnorm( 1- 0.05/2)
z
lower_ci <- mu - z*error
upper_ci <- mu + z*error
c("estimate" = mu, "lower" = lower_ci, "upper" = upper_ci)
error <- s/sqrt(n)
lower_ci <- mu - z*error
upper_ci <- mu + z*error
c("estimate" = mu, "lower" = lower_ci, "upper" = upper_ci)
round(c("estimate" = mu, "lower" = lower_ci, "upper" = upper_ci),2)
error
n
z
z*error
round(c("estimate" = mu, "lower" = lower_ci, "upper" = upper_ci),2)
z <- qnorm(1 - 0.1/2)
# compute the confidence interval and print out the results
lower_ci <- mu - z*error
upper_ci <- mu + z*error
round(c("estimate" = mu, "lower" = lower_ci, "upper" = upper_ci),2)
z <- qnorm(1 - 0.05/2)
z <- qnorm(1 - 0.01/2)
# compute the confidence interval and print out the results
lower_ci <- mu - z*error
upper_ci <- mu + z*error
round(c("estimate" = mu, "lower" = lower_ci, "upper" = upper_ci),2)
round(c("estimate" = mu, "lower_ci" = lower_ci, "upper_ci" = upper_ci),2)
interval
interval
interval <- round(c("estimate" = mu, "lower_ci" = lower_ci, "upper_ci" = upper_ci),2)
interval
CI <- round(c("estimate" = mu, "lower_ci" = lower_ci, "upper_ci" = upper_ci),2)
CI
CI <- round(c("estimate" = mu, "lower_ci" = lower_ci, "upper_ci" = upper_ci),1)
CI
CI <- ("estimate" = mu, "lower" = lower_ci, "upper" = upper_ci)
CI <- ("estimate" = mu, "lower" = lower_ci, "upper" = upper_ci)
CI <- ("estimate" = mu, "lower" = lower_ci, "upper" = upper_ci)
CI <- c("estimate" = mu, "lower" = lower_ci, "upper" = upper_ci)
CI
round(CI,1)
CI <- round(c("estimate" = mu, "lower" = lower_ci, "upper" = upper_ci),1)
CI
CI <- round(c("estimate" = mu, "lower_99%" = lower_ci, "upper_99%" = upper_ci),1)
CI
CI <- round(c("estimate" = mu, "lower99%" = lower_ci, "upper99%" = upper_ci),1)
CI
CI <- round(c("estimate" = mu, "lower 99%" = lower_ci, "upper 99%" = upper_ci),1)
CI
CI <- round(c("estimate" = mu, "low 99%" = lower_ci, "up 99%" = upper_ci),1)
CI
CI <- round(c("estimate" = mu, "lower 99%" = lower_ci, "upper 99%" = upper_ci),1)
CI
CI <- round(c("estimate" = mu, "lower" = lower_ci, "upper" = upper_ci),1)
CI
CI <- round(c("estimate" = mu, "lower99%" = lower_ci, "upper99%" = upper_ci),1)
CI
points <- learning2014$points
library(testwhat)
?test_output_contains
?sample
N <- 100
means <- numeric(N)
means
for(i in 1:N) {
points_sample <- sample(points, size = 50, replace = F)
means[i] <- mean(points_sample)
}
quantile(means, p = c(0.01, 0.99))
quantile(means, p = c(0.005, 0.995))
N <- 1000
means <- numeric(N)
means
N <- 100
means <- numeric(N)
means
# repeat N times: draw a random sample and compute the mean
for(i in 1:N) {
points_sample <- sample(points, size = 50, replace = F)
means[i] <- mean(points_sample)
}
# Explore the sampling distribution
summary(means)
summary(points)
sumary(points)
summary(points)
hisy(points)
his(points)
hist(points)
barplot(table(cut(points, (0:5)*6)))
summary(points)
barplot(table(cut(points, (0:7)*5)))
barplot(table(cut(points, (0:11)*3))
)
barplot(table(cut(points, (0:11)*3)), las = 2)
barplot(table(cut(points, (-1:11)*3)), las = 2)
barplot(table(cut(points, (0:11)*3), include.lower=T), las = 2)
barplot(table(cut(points, (0:11)*3)), las = 2)
?cut
barplot(table(cut(points, (0:11)*3), include.lowest=T), las = 2)
barplot(table(cut(points, (0:11)*3, include.lowest=T)), las = 2)
df <-  read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/learning2014.txt", sep = "\t", header = TRUE)
barplot(table(cut(df$points, (0:11)*3, include.lowest=T)), las = 2, main = "Distribution of students exam points")
barplot(table(cut(df$points, (0:11)*3, include.lowest=T)), las = 2, main = "Distribution of students exam points", xlab = "points")
barplot(table(cut(df$points, (0:11)*3, include.lowest=T)), las = 2, main = "Distribution of students exam points", xlab = "\npoints")
barplot(table(cut(df$points, (0:11)*3, include.lowest=T)), las = 2, main = "Distribution of students exam points", xlab = "\n points")
barplot(table(cut(df$points, (0:11)*3, include.lowest=T)), las = 2, main = "Distribution of students exam points", xlab = "\n \n points")
formal(quantile)
formals(quantile)
?quantile
learning2014 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/learning2014.txt", sep = "\t", header = TRUE)
str(learning2014)
stra_learners <- subset(learning2014, stra > 3)
stra_learners <- subset(learning2014, stra > 3)
stra_learners <- subset(learning2014, stra > 3)
head(stra_learners)
head(learning2014)
stra_learners <- subset(learning2014, stra > 4)
head(stra_learners)
c("a","b","c") < 1
c("a","b","c") < 0
c("a","b","c") > 3
c("a","b","c") == "b"
c(2,3,1) < 3
c(1,3,2) < 3
learning2014 <-  read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/learning2014.txt", sep = "\t", header = TRUE)
table(learning2014$gender)
open_meta2 <- function() browseURL("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS2-meta.txt")
open_meta2()
students2014 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS-data.txt", sep="\t", header=TRUE)
# keep a couple background variables
students2014 <- students2014[,c("sukup","toita","ika","pituus","kenka","kone")]
# recode kone variables missing values as factor levels
students2014$kone <- addNA(students2014$kone)
# keep only rows without missing values
students2014 <- students2014[complete.cases(students2014),]
# integers to numeric
students2014$ika <- as.numeric(students2014$ika)
students2014$pituus <- as.numeric(students2014$pituus)
students2014$kenka <- as.numeric(students2014$kenka)
str(students2014)
head(learning2014)
test <- as.factor(learning2014$gender, levels = c(1,2), labels = c("M","N"))
?as.factor
test <- factor(learning2014$gender, levels = c(1,2), labels = c("M","N"))
head(tet)
head(test)
table(test)
learning2014 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/learning2014.txt", sep = "\t", header = TRUE)
# recode gender to factor
learning2014$gender <- factor(learning2014$gender, levels = c(1,2), labels = c("M","N"))
deep_fems <- subset(learning2014, (gender == "N") & (deep > 4))
deep_fems
stra_female <- subset(learning2014, (gender == "N") & (stra > 4))
stra_female
stra_female <- subset(learning2014, (gender == "N") & (stra > 4.5))
stra_female
deep_stra_M <- subset(learning2014, (gender == "M") & (stra > 4.5 | deep > 4.5))
deep_stra_M
subset(learning2014, deep > 4 & (points==0 | points > 30))
subset(learning2014, deep > 4.5 & (points==0 | points > 30))
subset(learning2014, deep > 4 & (points==0 | points > 30))
deep_male <- subset(learning2014, (gender == "M") & (stra > 4.5))
deep_male
deep_male <- subset(learning2014, (gender == "M") & (deep > 4.5))
deep_male
stra_female <- subset(learning2014, (gender == "N") & (stra > 4.5))
stra_female
subset(learning2014, (gender == "M") & (points != 0))
stra_female <- subset(learning2014, (gender == "N") & (stra > 4.5))
stra_female
subset(learning2014, (gender == "M") & (deep > 4.5) & (points != 0))
subset(learning2014, (gender == "M") & (deep > 4.5) & (points != 0))
subset(learning2014, (gender == "M") & (deep > 4.5) & (points != 0))
subset(learning2014, (gender == "M") & (deep > 4.5))
subset(learning2014, deep > 4 & (points == 0 | points > 30))
subset(learning2014, deep > 4.5 & (points == 0 | points > 30))
subset(learning2014, deep > 4.2 & (points == 0 | points > 30))
subset(learning2014, deep > 4.4 & (points == 0 | points > 30))
subset(learning2014, deep > 4.5 & (points == 0 | points > 30))
subset(learning2014, deep > 4.2 & (points == 0 | points > 30))
subset(learning2014, deep > 4.1 & (points == 0 | points > 30))
subset(learning2014, deep > 4.2 & (points == 0 | points > 30))
subset(learning2014, (gender == "N") & (stra > 4.5))
subset(learning2014, deep > 4,2 & (points == 0 | points > 30))
subset(learning2014, deep > 4.2 & (points == 0 | points > 30))
subset(learning2014, (age==24 | age == 25) & attitude > 4)
subset(learning2014, (age==21 | age == 22) & attitude > 4)
subset(learning2014, (age==22 | age == 23) & attitude > 4)
subset(learning2014, (age == 22 | age == 24) & attitude > 4)
subset(learning2014, (age == 25 | age == 26) & attitude > 4)
subset(learning2014, (age == 25 | age == 26) & attitude > 3)
subset(learning2014, (age == 25 | age == 26) & attitude > 3.5)
subset(learning2014, deep > 4.2 & (points == 0 | points > 30))
subset(learning2014, (gender == "M") & (deep > 4.5) & (points != 0))
subset(learning2014, (age == 25 | age == 26) & attitude > 3.5)
subset(learning2014, (gender == "N") & (stra > 4.5))
subset(learning2014, (gender == "N") & (stra > 4.2))
subset(learning2014, (gender == "M") & (deep > 4.2) & (points != 0))
subset(learning2014, (gender == "M") & (deep > 4.5) & (points != 0))
subset(learning2014, (gender == "M") & (deep > 4.4) & (points != 0))
subset(learning2014, deep > 4.4 & (points == 0 | points > 30))
subset(learning2014, deep > 4.2 & (points == 0 | points > 30))
subset(learning2014, (gender == "M") & (deep > 4.2) & (points != 0))
subset(learning2014, (gender == "N") & (stra > 4.2))
4.2
subset(learning2014, (gender == "M") & (deep > 4.2) & (points != 0))
df <-  read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/learning2014.txt", sep = "\t", header = TRUE)
points <- table(cut(df$points, (0:11)*3, include.lowest=T))
deep <- table(cut(df$deep, 0:5))
stra <- table(cut(df$stra, 0:5))
surf <- table(cut(df$surf, 0:5))
barplot(table(df$gender), main = "Distribution of students gender")
boxplot(df$age, main = "Box plot of students age", xlab = "age")
boxplot(df$age, main = "Box plot of students age", xlab = "age", h = T)
boxplot(df$age, main = "Box plot of students age", xlab = "age", hor = T)
boxplot(df$age, main = "Box plot of students age", xlab = "age", hor = F)
boxplot(df$age, main = "Box plot of students age", xlab = "age", horizontal = F)
boxplot(df$age, main = "Box plot of students age", xlab = "age", horizontal = T)
boxplot(df$age, main = "Box plot of students age", xlab = "age", horiz = T)
boxplot(df$age, main = "Box plot of students age", xlab = "age", horizontal = T)
barplot(table(df$gender), main = "Distribution of students gender")
barplot(surf, main = "Distribution of students scores on surface learning questions")
barplot(deep, main = "Distribution of students scores on deep learning questions")
barplot(surf, main = "Distribution of students scores on surface learning")
barplot(deep, main = "Distribution of students scores on deep learning")
barplot(stra, main = "Distribution of students scores on strategic learning")
barplot(points, las = 2, main = "Distribution of students exam points", xlab = "points")
barplot(points, las = 2, main = "Distribution of students exam points", xlab = "")
barplot(deep, main = "Distribution of students scores on deep learning")
deep <- table(cut(df$deep, 1:5))
stra <- table(cut(df$stra, 1:5))
surf <- table(cut(df$surf, 1:5))
barplot(surf, main = "Distribution of students scores on surface learning")
barplot(deep, main = "Distribution of students scores on deep learning")
barplot(stra, main = "Distribution of students scores on strategic learning")
deep <- table(cut(df$deep, 1:5), include.lowest = T)
stra <- table(cut(df$stra, 1:5), include.lowest = T)
surf <- table(cut(df$surf, 1:5), include.lowest = T)
deep <- table(cut(df$deep, 1:5, include.lowest = T))
stra <- table(cut(df$stra, 1:5, include.lowest = T))
surf <- table(cut(df$surf, 1:5, include.lowest = T))
barplot(surf, main = "Distribution of students scores on surface learning")
barplot(deep, main = "Distribution of students scores on deep learning")
barplot(stra, main = "Distribution of students scores on strategic learning")
barplot(surf, main = "Distribution of students scores on surface learning")
barplot(deep, main = "Distribution of students scores on deep learning")
barplot(stra, main = "Distribution of students scores on strategic learning")
boxplot(df$age, main = "Box plot of students age", xlab = "age", horizontal = T)
learning2014 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/learning2014.txt", sep = "\t", header = TRUE)
learning2014$gender <- factor(learning2014$gender, levels = c(1,2), labels = c("M","N"))
learning2014 <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/learning2014.txt", sep = "\t", header = TRUE)
subset(learning2014, (gender == "M") & (deep > 4.2))
subset(learning2014, (gender == "M") & (deep > 4.5))
subset(learning2014, (gender == "N") & (stra > 4.5))
subset(learning2014, deep > 4.5 & (points == 0 | points > 30))
subset(learning2014, deep > 4 & (points == 0 | points > 30))
learning2014 <-  read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/learning2014.txt", sep = "\t", header = TRUE)
table(learning2014$gender, learning2014$age)
str(learning2014)
quantile(learning2014$deep)
quantile(learning2014$deep, probs = (0:10)/10)
attitude <- cut(learning2014$attitude, 1:5, include.lowest = T)
table(attitude)
table(gender,attitude)
gender <- learning2014$gender
table(gender,attitude)
gndr_atttude <- table(gender,attitude)
gndr_att <- table(gender,attitude)
addmargins(gndr_att)
p2 <- round(NULL)
gndr_att <- table(gender,attitude)
addmargins(gndr_att)
p1 <- round(61/122, 2)
p1
p1 <- round(61/183, 2)
p1
p1
p2
p2 <- round(14 / 183, 2)
p2
addmargins(gndr_att)
p1 <- round(61/183, digits = 2)
p1
p1 <- round(61/183, digits = 2)
p1
addmargins(gndr_att)
addmargins(gndr_att)
attitude <- cut(learning2014$attitude, 1:5, include.lowest = T)
gndr_att <- table(learning2014$gender, attitude)
addmargins(gnrd_att)
attitude <- cut(learning2014$attitude, 1:5, include.lowest = T)
gnd_att <- table(learning2014$gender, attitude)
addmargins(gnd_att)
gnd_att <- table(learning2014$gender, attitude)
addmargins(gnd_att)
p1 <- round(61/183, digits = 2)
addmargins(gndr_att)
p2 <- round(122/183, digits = 2)
p2== 1-p1
p2
p1
1-p1
p2==(1-p1)
1-p1
p2
str(p1)
str(1-p2)
p1==(1-p2)
p1==p1
addmargins(gndr_att)
p3 <- round((85+19)/183, digits = 2)
c(1,3,2) < 3
N <- 100
means <- numeric(N)
means
for(i in 1:N) {
points_sample <- sample(points, size = 50, replace = F)
means[i] <- mean(points_sample)
}
points <- learning2014$points
learning2014 <-  read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/learning2014.txt", sep = "\t", header = TRUE)
points <- learning2014$points
N <- 100
means <- numeric(N)
means
for(i in 1:N) {
points_sample <- sample(points, size = 50, replace = F)
means[i] <- mean(points_sample)
}
4000/25
rivit <- read.csv2("Tilastot.csv", stringsAsFactors = FALSE)
setwd("~/GitHub/Vakio")
rivit <- read.csv2("Tilastot.csv", stringsAsFactors = FALSE)
nr <- nrow(rivit)
# create a list of tables of 1 x 2 frequencies
freqs <- apply(rivit, 1, table)
# combine the lists to a data.frame (ignore warning)
freqs <- as.data.frame(do.call(rbind, freqs))
freqs <- apply(rivit, 1, table)
freqs <- as.data.frame(do.call(rbind, as.list(freqs)))
freqs <- apply(rivit, 1, table)
str(freqs)
rivit <- read.csv2("Tilastot.csv", stringsAsFactors = T)
nr <- nrow(rivit)
freqs <- apply(rivit, 1, table)
str(freqs)
freqs <- apply(rivit, 1, FUN = function(row) table(factor(row, levels = c("1","x","2"))))
freqs <- as.data.frame(do.call(rbind, freqs))
str(freqs)
freqs <- apply(rivit, 1, FUN = function(row) table(factor(row, levels = c("1","x","2"))))
freqs <- t(freqs)
cum_freqs <- cumsum(freqs)
cum_prop <- cum_freqs / cumsum(rep(13, nr))
plot(1:nr,
main = "Cumulative proportions of match outcomes
Vakioveikkaus data 37/1972 - 40/2016",
ylab = "cumulative proportion",
xlab = "week",
type = "n", ylim = c(0, 0.5))
for(i in 1:3) {
lines(1:nr, cum_prop[, i], col = i)
}
str(cum_freqs)
freqs <- data.frame(t(freqs))
cum_freqs <- cumsum(freqs)
srt(cum_freqs)
str(cum_freqs)
str(freqs)
freqs <- apply(rivit, 1, FUN = function(row) table(factor(row, levels = c("1","x","2"))))
freqs <- as.data.frame(t(freqs))
str(freqs)
cum_freqs <- cumsum(freqs)
cum_prop <- cum_freqs / cumsum(rep(13, nr))
plot(1:nr,
main = "Cumulative proportions of match outcomes
Vakioveikkaus data 37/1972 - 40/2016",
ylab = "cumulative proportion",
xlab = "week",
type = "n", ylim = c(0, 0.5))
# plot the cumulative proportions
for(i in 1:3) {
lines(1:nr, cum_prop[, i], col = i)
}
freqs <- apply(rivit, 1, FUN = function(row) table(factor(row, levels = c("1","X","2"))))
rivit <- read.csv2("Tilastot.csv", stringsAsFactors = FALSE)
str8RIVIT
str(rivit)
freqs <- apply(rivit, 1, FUN = function(row) table(factor(row, levels = c("1","X","2"))))
freqs <- as.data.frame(t(freqs))
cum_freqs <- cumsum(freqs)
cum_prop <- cum_freqs / cumsum(rep(13, nr))
plot(1:nr,
main = "Cumulative proportions of match outcomes
Vakioveikkaus data 37/1972 - 40/2016",
ylab = "cumulative proportion",
xlab = "week",
type = "n", ylim = c(0, 0.5))
for(i in 1:3) {
lines(1:nr, cum_prop[, i], col = i)
}
legend("bottomright", legend = outcomes, col = 1:3, lty = 1)
outcomes <- names(cum_prop)
outcomes <- paste0(outcomes, " (", round(100*cum_prop[nr, ],0), "%)")
legend("bottomright", legend = outcomes, col = 1:3, lty = 1)
knir("readme.Rmd", "README.md")
library(knitr)
knit("readme.Rmd", "README.md")
sapply(0:13, FUN = function(wins) sum(freqs[["1"]]==wins))
knit("readme.Rmd", "README.md")
